// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductOrderApi.Infrastructure;

#nullable disable

namespace ProductOrderApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250103181910_Update")]
    partial class Update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProductOrderApi.Entities.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Color"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Length"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Weight"
                        });
                });

            modelBuilder.Entity("ProductOrderApi.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Test order 1",
                            TotalPrice = 133.14m,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Test order 2",
                            TotalPrice = 444.12m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Test order 3",
                            TotalPrice = 234.12m,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("ProductOrderApi.Entities.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts", t =>
                        {
                            t.HasCheckConstraint("CK_OrderProduct_Price", "Price > 0");

                            t.HasCheckConstraint("CK_OrderProduct_Quantity", "Price > 0");
                        });

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ProductId = 1,
                            Price = 11.51m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 2,
                            Price = 15.20m,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 1,
                            ProductId = 3,
                            Price = 1234.19m,
                            Quantity = 3
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 2,
                            Price = 1451.60m,
                            Quantity = 1
                        },
                        new
                        {
                            OrderId = 2,
                            ProductId = 3,
                            Price = 1321.12m,
                            Quantity = 2
                        },
                        new
                        {
                            OrderId = 3,
                            ProductId = 2,
                            Price = 151.42m,
                            Quantity = 14
                        });
                });

            modelBuilder.Entity("ProductOrderApi.Entities.OrderTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderTracking", t =>
                        {
                            t.HasCheckConstraint("CK_OrderTracking_Status", "Status BETWEEN 1 AND 8");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(1246)
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            Status = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(1251)
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 1,
                            Status = 3,
                            UpdatedAt = new DateTime(2025, 1, 2, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(1253)
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 12, 29, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(1255)
                        },
                        new
                        {
                            Id = 5,
                            OrderId = 2,
                            Status = 2,
                            UpdatedAt = new DateTime(2024, 12, 30, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(1256)
                        },
                        new
                        {
                            Id = 6,
                            OrderId = 2,
                            Status = 3,
                            UpdatedAt = new DateTime(2024, 12, 31, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(1258)
                        },
                        new
                        {
                            Id = 7,
                            OrderId = 2,
                            Status = 6,
                            UpdatedAt = new DateTime(2025, 1, 1, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(1259)
                        },
                        new
                        {
                            Id = 8,
                            OrderId = 3,
                            Status = 1,
                            UpdatedAt = new DateTime(2025, 1, 3, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(1261)
                        });
                });

            modelBuilder.Entity("ProductOrderApi.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products", t =>
                        {
                            t.HasCheckConstraint("CK_Product_Price", "Price > 0");

                            t.HasCheckConstraint("CK_Product_QuantityInStock", "QuantityInStock >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AD268754",
                            CreatedAt = new DateTime(2025, 1, 3, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(650),
                            Description = "Test description for product 1",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2025, 1, 3, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(695),
                            Name = "Product 1",
                            Price = 15.99m,
                            QuantityInStock = 14
                        },
                        new
                        {
                            Id = 2,
                            Code = "FR235467",
                            CreatedAt = new DateTime(2025, 1, 3, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(699),
                            Description = "Test description for product 2",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2025, 1, 3, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(700),
                            Name = "Product 2",
                            Price = 1.50m,
                            QuantityInStock = 3
                        },
                        new
                        {
                            Id = 3,
                            Code = "TY547756",
                            CreatedAt = new DateTime(2025, 1, 3, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(703),
                            Description = "Test description for product 3",
                            IsAvailable = true,
                            ModifiedAt = new DateTime(2025, 1, 3, 19, 19, 10, 407, DateTimeKind.Local).AddTicks(704),
                            Name = "Product 3",
                            Price = 24.99m,
                            QuantityInStock = 11
                        });
                });

            modelBuilder.Entity("ProductOrderApi.Entities.ProductFeature", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("ProductId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("ProductFeatures");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            FeatureId = 1,
                            Value = "Red"
                        },
                        new
                        {
                            ProductId = 1,
                            FeatureId = 2,
                            Value = "50mm"
                        },
                        new
                        {
                            ProductId = 1,
                            FeatureId = 3,
                            Value = "12.455 kg"
                        },
                        new
                        {
                            ProductId = 2,
                            FeatureId = 1,
                            Value = "Greed"
                        },
                        new
                        {
                            ProductId = 2,
                            FeatureId = 2,
                            Value = "200mm"
                        },
                        new
                        {
                            ProductId = 2,
                            FeatureId = 3,
                            Value = "0.455 kg"
                        },
                        new
                        {
                            ProductId = 3,
                            FeatureId = 1,
                            Value = "Blue"
                        },
                        new
                        {
                            ProductId = 3,
                            FeatureId = 2,
                            Value = "1010mm"
                        },
                        new
                        {
                            ProductId = 3,
                            FeatureId = 3,
                            Value = "1.12 kg"
                        });
                });

            modelBuilder.Entity("ProductOrderApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            IsActive = true,
                            Password = "fFied55ufW537BcXC4z0CHqWWZ7gWwyI6K5OgZVG32VP2tScM02Mv/BWLWSI7nVL"
                        },
                        new
                        {
                            Id = 2,
                            Email = "customer@example.com",
                            IsActive = true,
                            Password = "fFied55ufW537BcXC4z0CHqWWZ7gWwyI6K5OgZVG32VP2tScM02Mv/BWLWSI7nVL"
                        },
                        new
                        {
                            Id = 3,
                            Email = "admin.custumer@example.com",
                            IsActive = true,
                            Password = "fFied55ufW537BcXC4z0CHqWWZ7gWwyI6K5OgZVG32VP2tScM02Mv/BWLWSI7nVL"
                        });
                });

            modelBuilder.Entity("ProductOrderApi.Entities.UserConfirmationToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<Guid>("Token")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "Token");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserConfirmationToken");
                });

            modelBuilder.Entity("ProductOrderApi.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "Role");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Role = "Customer"
                        },
                        new
                        {
                            UserId = 3,
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = 3,
                            Role = "Customer"
                        });
                });

            modelBuilder.Entity("ProductOrderApi.Entities.Order", b =>
                {
                    b.HasOne("ProductOrderApi.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductOrderApi.Entities.OrderProduct", b =>
                {
                    b.HasOne("ProductOrderApi.Entities.Order", "Order")
                        .WithMany("Cart")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductOrderApi.Entities.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductOrderApi.Entities.OrderTracking", b =>
                {
                    b.HasOne("ProductOrderApi.Entities.Order", "Order")
                        .WithMany("Tracking")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ProductOrderApi.Entities.ProductFeature", b =>
                {
                    b.HasOne("ProductOrderApi.Entities.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductOrderApi.Entities.Product", "Product")
                        .WithMany("Features")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductOrderApi.Entities.UserConfirmationToken", b =>
                {
                    b.HasOne("ProductOrderApi.Entities.User", "User")
                        .WithOne("ConfirmationToken")
                        .HasForeignKey("ProductOrderApi.Entities.UserConfirmationToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductOrderApi.Entities.UserRole", b =>
                {
                    b.HasOne("ProductOrderApi.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductOrderApi.Entities.Order", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Tracking");
                });

            modelBuilder.Entity("ProductOrderApi.Entities.Product", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ProductOrderApi.Entities.User", b =>
                {
                    b.Navigation("ConfirmationToken")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
